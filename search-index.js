crystal_doc_search_index_callback({"repository_name":"github.com/onyxframework/eda","body":"<a href=\"https://onyxframework.org\"><img width=\"100\" height=\"100\" src=\"https://onyxframework.org/img/logo.svg\"></a>\n\n# Onyx::EDA\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Travis CI build](https://img.shields.io/travis/onyxframework/eda/master.svg?style=flat-square)](https://travis-ci.org/onyxframework/eda)\n[![Docs](https://img.shields.io/badge/docs-online-brightgreen.svg?style=flat-square)](https://docs.onyxframework.org/eda)\n[![API docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://api.onyxframework.org/eda)\n[![Latest release](https://img.shields.io/github/release/onyxframework/eda.svg?style=flat-square)](https://github.com/onyxframework/eda/releases)\n\nAn Event-Driven Architecture framework to build reactive apps.\n\n## About üëã\n\nOnyx::EDA is an [Event-Driven Architecture](https://en.wikipedia.org/wiki/Event-driven_architecture) framework. It allows to emit certain *events* and subscribe to them.\n\nCurrently the framework has these *channels* implemented:\n\n* [Memory channel](https://api.onyxframework.org/eda/Onyx/EDA/Channel/Memory.html)\n* [Redis channel](https://api.onyxframework.org/eda/Onyx/EDA/Channel/Redis.html) (working on [Redis streams](https://redis.io/topics/streams-intro))\n\nOnyx::EDA is a **real-time** events framework. It does not process events happend in the past and currently does not care about reliability in case of third-party service dependant channels (i.e. Redis).\n\nüëç The framework is a great choice for reactive and/or distributed applications, effectively allowing to have multiple loosely-coupled components which do not directly interact with each other, but rely on events instead.\n\nüëé However, Onyx::EDA is not a good choice for tasks requiring reliability, for example, background processing. If a Redis consumer dies during processing, the event is likely to not be processed. This behaviour may change in the future.\n\n## Installation üì•\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  onyx:\n    github: onyxframework/onyx\n    version: ~> 0.6.0\n  onyx-eda:\n    github: onyxframework/eda\n    version: ~> 0.4.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/vladfaust/timer.cr/releases) and change the `version` accordingly.\n\n> Note that until Crystal is officially released, this shard would be in beta state (`0.*.*`), with every **minor** release considered breaking. For example, `0.1.0` ‚Üí `0.2.0` is breaking and `0.1.0` ‚Üí `0.1.1` is not.\n\n## Usage üíª\n\nFirst of all, you must require channels you'd need:\n\n```crystal\nrequire \"onyx/eda/memory\"\nrequire \"onyx/eda/redis\"\n```\n\nThen define events to emit:\n\n```crystal\nstruct MyEvent\n  include Onyx::EDA::Event\n\n  getter foo\n\n  def initialize(@foo : String)\n  end\nend\n```\n\n### Basic subscribing\n\nYou must define a block which would be run on incoming event:\n\n```crystal\nOnyx::EDA.memory.subscribe(MyEvent) do |event|\n  pp event.foo\nend\n```\n\nSubscribing and emitting are **asynchronous** operations. You must then `yield` the control with `sleep` or `Fiber.yield` to let notifications reach their subscriptions:\n\n```crystal\nOnyx::EDA.memory.emit(MyEvent.new(\"bar\"))\nsleep(1)\n```\n\nOutput, as expected:\n\n```\nbar\n```\n\nYou can cancel a subscription as well:\n\n```crystal\nsub = Onyx::EDA.memory.subscribe(MyEvent) do |event|\n  pp event.foo\nend\n\nsub.unsubscribe\n```\n\n### Subscribing with filters\n\nYou can filter incoming events and run the subscription block only if the event's getters match the filter:\n\n```crystal\n# Would only put \"bar\"\nOnyx::EDA.memory.subscribe(MyEvent, foo: \"bar\") do |event|\n  pp event.foo\nend\n\nOnyx::EDA.memory.emit(MyEvent.new(\"qux\")) # Would not notify the subscription above\nOnyx::EDA.memory.emit(MyEvent.new(\"bar\")) # OK, condition is met\n```\n\n### Consuming\n\nYou can create an event consumption instead of a subscription. From docs:\n\n> Consumption differs from subscription in a way that only a single consuming subscription instance with certain *consumer_id* among all this channel subscribers would be notified about an event after it successfully acquires a lock. The lock implementation differs in channels.\n\nIn this code only **one** `\"bar\"` will be put, because both subscriptions have `\"MyConsumer\"` as the consumer ID:\n\n```crystal\nsub1 = Onyx::EDA.memory.subscribe(MyEvent, \"MyConsumer\") do |event|\n  puts event.foo\nend\n\nsub2 = Onyx::EDA.memory.subscribe(MyEvent, \"MyConsumer\") do |event|\n  puts event.foo\nend\n\nOnyx::EDA.memory.emit(MyEvent.new(\"bar\"))\n```\n\nThe consuming works as expected with [Redis channel](https://api.onyxframework.org/eda/Onyx/EDA/Channel/Redis.html) as well. It relies on [Redis streams](https://redis.io/topics/streams-intro). However, if a consumer crashes, then no other consumer with the same ID would try to process this event anymore (i.e. the behavior is unreliable). This may change in the future.\n\nNote that you can not use event filters while consuming.\n\n### Awaiting\n\nIt is possible to await for a certain event to happen in a **blocking** manner:\n\n```crystal\n# Will block the execution until the event is received\nOnyx::EDA.memory.await(MyEvent) do |event|\n  pp event.foo\nend\n```\n\nIt is particularly useful in `select` blocks:\n\n```crystal\nselect\nwhen event = Onyx::EDA.memory.await(MyEvent)\n  pp event.foo\nwhen Timer.new(30.seconds)\n  raise \"Timeout!\"\nend\n```\n\n*üí° See [timer.cr](https://github.com/vladfaust/timer.cr) for a timer shard.*\n\nYou can use filters with awaiting, making it possible to wait for a specific event hapenning:\n\n```crystal\nrecord MyEventHandled, parent_event_id : UUID do\n  include Onyx::EDA::Event\nend\n\nevent = Onyx::EDA.redis.emit(MyEvent.new(\"bar\"))\n\nselect\nwhen event = Onyx::EDA.redis.await(MyEventHandled, parent_event_id: event.event_id)\n  puts \"Handled\"\nwhen Timer.new(30.seconds)\n  raise \"Timeout!\"\nend\n```\n\n### `Subscriber` and `Consumer`\n\nYou can include the `Subscriber(T)` and `Consumer(T)` modules into an object, turning it into an event (`T`) subscriber or consumer. It must implement `handle(event : T)` and be explicitly subscribed to a channel.\n\n```crystal\nclass Actor::Logger\n  include Onyx::EDA::Subscriber(Event::User::Registered)\n  include Onyx::EDA::Consumer(Event::Payment::Successfull)\n\n  # This method will be called in *all* Actor::Logger instances\n  def handle(event : Event::User::Registered)\n    log_into_terminal(\"New user with id #{event.id}\")\n  end\n\n  # This method will be called in only *one* Actor::Logger instance\n  def handle(event : Event::Payment::Successfull)\n    send_email(\"admin@example.com\", \"New payment of $#{event.amount}\")\n  end\nend\n\nactor = Actor::Logger.new\nactor.subscribe(Onyx::EDA.memory)   # Non-blocking method\nactor.unsubscribe(Onyx::EDA.memory) # Can be unsubscribed as well\n```\n\n## Documentation üìö\n\nThe documentation is available online at [docs.onyxframework.org/eda](https://docs.onyxframework.org/eda).\n\n## Community üç™\n\nThere are multiple places to talk about Onyx:\n\n* [Gitter](https://gitter.im/onyxframework)\n* [Twitter](https://twitter.com/onyxframework)\n\n## Support üïä\n\nThis shard is maintained by me, [Vlad Faust](https://vladfaust.com), a passionate developer with years of programming and product experience. I love creating Open-Source and I want to be able to work full-time on Open-Source projects.\n\nI will do my best to answer your questions in the free communication channels above, but if you want prioritized support, then please consider becoming my patron. Your issues will be labeled with your patronage status, and if you have a sponsor tier, then you and your team be able to communicate with me privately in [Twist](https://twist.com). There are other perks to consider, so please, don't hesistate to check my Patreon page:\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\nYou could also help me a lot if you leave a star to this GitHub repository and spread the word about Crystal and Onyx! üì£\n\n## Contributing\n\n1. Fork it ( https://github.com/onyxframework/eda/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'feat: some feature') using [Angular style commits](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n\n## Licensing\n\nThis software is licensed under [MIT License](LICENSE).\n\n[![Open Source Initiative](https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Opensource.svg/100px-Opensource.svg.png)](https://opensource.org/licenses/MIT)\n","program":{"html_id":"github.com/onyxframework/eda/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/onyxframework/eda","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx","path":"Onyx.html","kind":"module","full_name":"Onyx","name":"Onyx","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda.cr","line_number":3,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Powerful framework for modern applications.\nSee [onyxframework.org](https://onyxframework.org).","summary":"<p>Powerful framework for modern applications.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA","path":"Onyx/EDA.html","kind":"module","full_name":"Onyx::EDA","name":"EDA","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda.cr","line_number":5,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda.cr"},{"filename":"onyx-eda/channel/memory.cr","line_number":3,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr"},{"filename":"onyx-eda/channel.cr","line_number":5,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr"},{"filename":"onyx-eda/channel/redis.cr","line_number":21,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx","kind":"module","full_name":"Onyx","name":"Onyx"},"doc":"Event-Driven Architecture framework. Read more at [Wikipedia](https://en.wikipedia.org/wiki/Event-driven_architecture).","summary":"<p>Event-Driven Architecture framework.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Actor","path":"Onyx/EDA/Actor.html","kind":"module","full_name":"Onyx::EDA::Actor","name":"Actor","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda/actor.cr","line_number":3,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/actor.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Consumer","kind":"module","full_name":"Onyx::EDA::Consumer(T)","name":"Consumer"},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Subscriber","kind":"module","full_name":"Onyx::EDA::Subscriber(T)","name":"Subscriber"}],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"A module which turns an object into event actor.\nIt is included into `Subscriber` and `Consumer` modules.","summary":"<p>A module which turns an object into event actor.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"subscribe(channel:Onyx::EDA::Channel):self-instance-method","html_id":"subscribe(channel:Onyx::EDA::Channel):self-instance-method","name":"subscribe","doc":"Subscribe to a *channel*.\nRaises if this actor is already subsribed to this channel.\nReturns self.","summary":"<p>Subscribe to a <em>channel</em>.</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Onyx::EDA::Channel"}],"args_string":"(channel : Onyx::EDA::Channel) : <span class=\"k\">self</span>","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/actor.cr#L9","def":{"name":"subscribe","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Onyx::EDA::Channel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if @subscribed_channels.includes?(channel)\n  raise(\"Already subscribed to #{channel}\")\nend\n@subscribed_channels.push(channel)\nself\n"}},{"id":"unsubscribe(channel:Onyx::EDA::Channel):self-instance-method","html_id":"unsubscribe(channel:Onyx::EDA::Channel):self-instance-method","name":"unsubscribe","doc":"Unsubscribe from a *channel*. Raises if this actor is already\nunsubscribed or not subscribed to this channel yet. Return self.","summary":"<p>Unsubscribe from a <em>channel</em>.</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Onyx::EDA::Channel"}],"args_string":"(channel : Onyx::EDA::Channel) : <span class=\"k\">self</span>","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/actor.cr#L17","def":{"name":"unsubscribe","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Onyx::EDA::Channel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if @subscribed_channels.includes?(channel)\nelse\n  raise(\"Not subscribed to #{channel} yet\")\nend\n@subscribed_channels.delete(channel)\nself\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","path":"Onyx/EDA/Channel.html","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel","abstract":true,"superclass":{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/subscription/inactive_error.cr","line_number":1,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription/inactive_error.cr"},{"filename":"onyx-eda/channel/subscription.cr","line_number":3,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription.cr"},{"filename":"onyx-eda/channel/duplicate_consumer_error.cr","line_number":1,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/duplicate_consumer_error.cr"},{"filename":"onyx-eda/channel.cr","line_number":8,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Memory","kind":"class","full_name":"Onyx::EDA::Channel::Memory","name":"Memory"},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Redis","kind":"class","full_name":"Onyx::EDA::Channel::Redis","name":"Redis"}],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"An abstract event channel.\nIt implements basic logic used in other channels.","summary":"<p>An abstract event channel.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"await(event:T.class,**filter,&block:T->U):UforallT,U-instance-method","html_id":"await(event:T.class,**filter,&amp;block:T-&gt;U):UforallT,U-instance-method","name":"await","doc":"Wait for an *event* to happen, returning the *block* execution result.\nAn event can be *filter*ed by its getters.\n\nIt is a **blocking** method.\n\n```\nrecord MyEvent, payload : String do\n  include Onyx::EDA::Event\nend\n\n# Will block the execution unless MyEvent is received with \"foo\" payload\npayload = channel.await(MyEvent, payload: \"foo\") do |event|\n  event.payload\nend\n\n# In another fiber...\nchannel.emit(MyEvent.new(\"foo\"))\n```\n\nThis method can be used within the `select` block. It works better with the [timer.cr](https://github.com/vladfaust/timer.cr) shard.\n\n```\nselect\nwhen payload = channel.await(MyEvent, &.payload)\n  puts payload\nwhen Timer.new(30.seconds)\n  raise \"Timeout!\"\nend\n```","summary":"<p>Wait for an <em>event</em> to happen, returning the <em>block</em> execution result.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, **filter, &block : T -> U) : U forall T, U","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L124","def":{"name":"await","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> U)"},"return_type":"U","visibility":"Public","body":"(await_channel(T, **filter, &block)).receive"}},{"id":"await(event,**filter)-instance-method","html_id":"await(event,**filter)-instance-method","name":"await","doc":"The same as block-version, but returns an *event* instance itself.\n\n```\nevent = channel.await(MyEvent)\n```\n\nThis method can be used within the `select` block. It works better with the [timer.cr](https://github.com/vladfaust/timer.cr) shard:\n\n```\nselect\nwhen event = channel.await(MyEvent)\n  puts event.payload\nwhen Timer.new(30.seconds)\n  raise \"Timeout!\"\nend\n```","summary":"<p>The same as block-version, but returns an <em>event</em> instance itself.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":""}],"args_string":"(event, **filter)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L148","def":{"name":"await","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":""}],"double_splat":{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"await(event, **filter, &.itself)"}},{"id":"emit(events:Enumerable):Enumerable-instance-method","html_id":"emit(events:Enumerable):Enumerable-instance-method","name":"emit","doc":"Emit *events* returning themselves.\nThis method usually blocks until all events are delivered,\nbut the subscription block calls happen asynchronously.","summary":"<p>Emit <em>events</em> returning themselves.</p>","abstract":true,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable"}],"args_string":"(events : Enumerable) : Enumerable","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L12","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable","visibility":"Public","body":""}},{"id":"emit(event:T):TforallT-instance-method","html_id":"emit(event:T):TforallT-instance-method","name":"emit","doc":"Emit *event* returning itself.\nThis method usually blocks until the event is delivered,\nbut the subscription block calls happen asynchronously.","summary":"<p>Emit <em>event</em> returning itself.</p>","abstract":true,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(event : T) : T forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L20","def":{"name":"emit","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":""}},{"id":"emit(*events):Enumerable-instance-method","html_id":"emit(*events):Enumerable-instance-method","name":"emit","doc":"Emit *events* returning themselves.\nThis method usually blocks until all events are delivered,\nbut the subscription block calls happen asynchronously.","summary":"<p>Emit <em>events</em> returning themselves.</p>","abstract":true,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":""}],"args_string":"(*events) : Enumerable","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L15","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Enumerable","visibility":"Public","body":""}},{"id":"subscribe(event:T.class,consumer_id:String,&block:T->UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","html_id":"subscribe(event:T.class,consumer_id:String,&amp;block:T-&gt;UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","name":"subscribe","doc":"Begin consuming an *event*. Consumption differs from subscription in a way that\nonly a single consuming subscription instance with certain *consumer_id* among\nall this channel subscribers would be notified about an event after it\nsuccessfully acquires a lock. The lock implementation differs in channels.\n\nReturns a `Subscription` instance. May raise `DuplicateConsumerError` if a\nduplicate consumer ID found for this event in this very process.\n\nThis is a non-blocking method, as it spawns a subscription fiber.\n\n```\nrecord MyEvent, payload : String do\n  include Onyx::EDA::Event\nend\n\nchannel = Onyx::EDA::Channel::Redis.new\n\nsub = channel.subscribe(MyEvent, \"MyConsumer\") do |event|\n  puts event.payload\nend\n```\n\nLaunch two subscribing processes, then emit an event in another process:\n\n```\n# Only one consumer of the two above will be notified\nchannel.emit(MyEvent.new(\"foo\"))\n```\n\nSee `Consumer` for an includable consumption module.","summary":"<p>Begin consuming an <em>event</em>.</p>","abstract":true,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"},{"name":"consumer_id","doc":null,"default_value":"","external_name":"consumer_id","restriction":"String"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, consumer_id : String, &block : T -> UNDERSCORE) : Onyx::EDA::Channel::Subscription(T) forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L88","def":{"name":"subscribe","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"},{"name":"consumer_id","doc":null,"default_value":"","external_name":"consumer_id","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"Subscription(T)","visibility":"Public","body":""}},{"id":"subscribe(event:T.class,**filter,&block:T->UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","html_id":"subscribe(event:T.class,**filter,&amp;block:T-&gt;UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","name":"subscribe","doc":"Subscribe to an *event*. Returns a `Subscription` instance, which can be cancelled.\nEvery subscription instance gets notified about an `#emit`ted event.\n\nThis is a non-blocking method, as it spawns a subscription fiber.\n\n```\nrecord MyEvent, payload : String do\n  include Onyx::EDA::Event\nend\n\nsub = channel.subscribe(MyEvent) do |event|\n  puts event.payload\nend\n\nchannel.emit(MyEvent.new(\"foo\"))\n\n# Need to yield the control\nsleep(0.1)\n\n# Can cancel afterwards\nsub.unsubscribe\n```\n\nYou can *filter* the events by their getters, for example:\n\n```\nchannel.subscribe(MyEvent, payload: \"bar\") do |event|\n  puts event.payload # Would only output events with \"bar\" payload\nend\n\nchannel.emit(MyEvent.new(\"foo\")) # Would not trigger the above subscription\n```\n\nSee `Subscriber` for an includable subscribing module.","summary":"<p>Subscribe to an <em>event</em>.</p>","abstract":true,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, **filter, &block : T -> UNDERSCORE) : Onyx::EDA::Channel::Subscription(T) forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L56","def":{"name":"subscribe","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"Subscription(T)","visibility":"Public","body":""}},{"id":"unsubscribe(subscription:Subscription):Bool-instance-method","html_id":"unsubscribe(subscription:Subscription):Bool-instance-method","name":"unsubscribe","doc":"Cancel a *subscription*. Returns a boolean value indicating whether was it\nsuccessufully cancelled or not (for instance, it may be already cancelled,\nreturning `false`).","summary":"<p>Cancel a <em>subscription</em>.</p>","abstract":true,"args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Subscription"}],"args_string":"(subscription : Subscription) : Bool","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel.cr#L93","def":{"name":"unsubscribe","args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Subscription"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/DuplicateConsumerError","path":"Onyx/EDA/Channel/DuplicateConsumerError.html","kind":"class","full_name":"Onyx::EDA::Channel::DuplicateConsumerError(T)","name":"DuplicateConsumerError","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/duplicate_consumer_error.cr","line_number":4,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/duplicate_consumer_error.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"doc":"Raised on `Channel#subscribe` with *consumer_id* argument if a consumer with the\nsame ID already exists in this process for this channel.","summary":"<p>Raised on <code><a href=\"../../../Onyx/EDA/Channel.html#subscribe(event:T.class,consumer_id:String,&block:T-%3EUNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method\">Channel#subscribe</a></code> with <em>consumer_id</em> argument if a consumer with the same ID already exists in this process for this channel.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"consumer_id:String-instance-method","html_id":"consumer_id:String-instance-method","name":"consumer_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/duplicate_consumer_error.cr#L7","def":{"name":"consumer_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@consumer_id"}},{"id":"event:T.class-instance-method","html_id":"event:T.class-instance-method","name":"event","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"t\">T</span>.<span class=\"k\">class</span>","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/duplicate_consumer_error.cr#L7","def":{"name":"event","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T.class","visibility":"Public","body":"T.class"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Memory","path":"Onyx/EDA/Channel/Memory.html","kind":"class","full_name":"Onyx::EDA::Channel::Memory","name":"Memory","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/memory.cr","line_number":5,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"doc":"An in-memory channel. Emitted events are visible within current process only.","summary":"<p>An in-memory channel.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"emit(events:Enumerable(T)):Enumerable(T)forallT-instance-method","html_id":"emit(events:Enumerable(T)):Enumerable(T)forallT-instance-method","name":"emit","doc":null,"summary":null,"abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"}],"args_string":"(events : Enumerable(T)) : Enumerable(T) forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr#L6","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable(T)","visibility":"Public","body":"emit_impl(events)"}},{"id":"emit(event:T):TforallT-instance-method","html_id":"emit(event:T):TforallT-instance-method","name":"emit","doc":null,"summary":null,"abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(event : T) : T forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr#L14","def":{"name":"emit","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"(emit_impl(event)).first"}},{"id":"emit(*events:*T):EnumerableforallT-instance-method","html_id":"emit(*events:*T):EnumerableforallT-instance-method","name":"emit","doc":null,"summary":null,"abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"*T"}],"args_string":"(*events : <span class=\"o\">*</span><span class=\"t\">T</span>) : Enumerable forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr#L10","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"*T"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Enumerable","visibility":"Public","body":"emit_impl(*events)"}},{"id":"subscribe(event:T.class,consumer_id:String,**filter,&block:T->UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","html_id":"subscribe(event:T.class,consumer_id:String,**filter,&amp;block:T-&gt;UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","name":"subscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"},{"name":"consumer_id","doc":null,"default_value":"","external_name":"consumer_id","restriction":"String"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, consumer_id : String, **filter, &block : T -> UNDERSCORE) : Onyx::EDA::Channel::Subscription(T) forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr#L26","def":{"name":"subscribe","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"},{"name":"consumer_id","doc":null,"default_value":"","external_name":"consumer_id","restriction":"String"}],"double_splat":{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"Subscription(T)","visibility":"Public","body":"subscribe_impl(event, consumer_id, **filter, &block)"}},{"id":"subscribe(event:T.class,**filter,&block:T->UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","html_id":"subscribe(event:T.class,**filter,&amp;block:T-&gt;UNDERSCORE):Onyx::EDA::Channel::Subscription(T)forallT-instance-method","name":"subscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, **filter, &block : T -> UNDERSCORE) : Onyx::EDA::Channel::Subscription(T) forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr#L18","def":{"name":"subscribe","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"Subscription(T)","visibility":"Public","body":"subscribe_impl(event, **filter, &block)"}},{"id":"unsubscribe(subscription:Subscription):Bool-instance-method","html_id":"unsubscribe(subscription:Subscription):Bool-instance-method","name":"unsubscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Subscription"}],"args_string":"(subscription : Subscription) : Bool","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/memory.cr#L35","def":{"name":"unsubscribe","args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Subscription"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"unsubscribe_impl(subscription)"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Redis","path":"Onyx/EDA/Channel/Redis.html","kind":"class","full_name":"Onyx::EDA::Channel::Redis","name":"Redis","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/redis.cr","line_number":76,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"doc":"A Redis channel. All subscribers to the same Redis instance receive notifications\nabout events emitted within this channel, which leads to an easy distribution.\n\nNOTE: It relies on Redis streams feature, which **requires Redis version >= 5**!\n\nIn Onyx::EDA events are delivered unreliably and in real-time, which means that\nfresh subscribers do not have access to recent events, only to the future ones.\nThat's why consumption is implemented with locks instead of consumer groups.\n\nAll events are serialized with [MessagePack](https://github.com/crystal-community/msgpack-crystal).\n\n```\n# Process #1\nrequire \"onyx-eda/channel/redis\"\n\nrecord MyEvent, payload : String do\n  include Onyx::EDA::Event\nend\n\nchannel = Onyx::EDA::Channel::Redis.new(\"redis://localhost:6379\")\nchannel.emit(MyEvent.new(\"foo\"))\n```\n\n```\n# Process #2\nrequire \"onyx-eda/channel/redis\"\n\nrecord MyEvent, payload : String do\n  include Onyx::EDA::Event\nend\n\nchannel = Onyx::EDA::Channel::Redis.new(\"redis://localhost:6379\")\nchannel.subscribe(MyEvent) do |event|\n  puts event.payload\n  exit\nend\n\nsleep\n```","summary":"<p>A Redis channel.</p>","class_methods":[],"constructors":[{"id":"new(redis:MiniRedis,sidekick:MiniRedis,namespace:String=&quot;onyx-eda&quot;)-class-method","html_id":"new(redis:MiniRedis,sidekick:MiniRedis,namespace:String=&amp;quot;onyx-eda&amp;quot;)-class-method","name":"new","doc":"Explicitly initialize with two [`MiniRedis`](https://github.com/vladfaust/mini_redis)\ninstances (one would block-read and another would issue commands)\nand Redis *namespace*.","summary":"<p>Explicitly initialize with two <a href=\"https://github.com/vladfaust/mini_redis\" target=\"_blank\"><code>MiniRedis</code></a> instances (one would block-read and another would issue commands) and Redis <em>namespace</em>.</p>","abstract":false,"args":[{"name":"redis","doc":null,"default_value":"","external_name":"redis","restriction":"MiniRedis"},{"name":"sidekick","doc":null,"default_value":"","external_name":"sidekick","restriction":"MiniRedis"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"args_string":"(redis : MiniRedis, sidekick : MiniRedis, namespace : String = <span class=\"s\">&quot;onyx-eda&quot;</span>)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L103","def":{"name":"new","args":[{"name":"redis","doc":null,"default_value":"","external_name":"redis","restriction":"MiniRedis"},{"name":"sidekick","doc":null,"default_value":"","external_name":"sidekick","restriction":"MiniRedis"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(redis, sidekick, namespace)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(uri:URI,namespace:String=&quot;onyx-eda&quot;,*args,**nargs)-class-method","html_id":"new(uri:URI,namespace:String=&amp;quot;onyx-eda&amp;quot;,*args,**nargs)-class-method","name":"new","doc":"Initialize with Redis *uri* and Redis *namespace*.\n*args* and *nargs* are passed directly to a `MiniRedis` instance.","summary":"<p>Initialize with Redis <em>uri</em> and Redis <em>namespace</em>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(uri : URI, namespace : String = <span class=\"s\">&quot;onyx-eda&quot;</span>, *args, **nargs)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L83","def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(MiniRedis.new(uri, *args, **nargs), MiniRedis.new(uri, *args, **nargs), namespace)"}},{"id":"new(uri:String,namespace:String=&quot;onyx-eda&quot;,*args,**nargs)-class-method","html_id":"new(uri:String,namespace:String=&amp;quot;onyx-eda&amp;quot;,*args,**nargs)-class-method","name":"new","doc":"Initialize with Redis *uri* and Redis *namespace*.\n*args* and *nargs* are passed directly to a `MiniRedis` instance.","summary":"<p>Initialize with Redis <em>uri</em> and Redis <em>namespace</em>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(uri : String, namespace : String = <span class=\"s\">&quot;onyx-eda&quot;</span>, *args, **nargs)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L92","def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"},{"name":"namespace","doc":null,"default_value":"\"onyx-eda\"","external_name":"namespace","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(MiniRedis.new(URI.parse(uri), *args, **nargs), MiniRedis.new(URI.parse(uri), *args, **nargs), namespace)"}}],"instance_methods":[{"id":"emit(events:Enumerable(T),redis:MiniRedis=@sidekick):Enumerable(T)forallT-instance-method","html_id":"emit(events:Enumerable(T),redis:MiniRedis=@sidekick):Enumerable(T)forallT-instance-method","name":"emit","doc":"Emit *events*, sending them to an appropriate stream. See `Channel#emit`.\nThe underlying `XADD` command has `MAXLEN ~ 1000` option.\n\nThis method **blocks** until all subscribers to this event read it from the stream.\n\nTODO: Allow to change `MAXLEN`.","summary":"<p>Emit <em>events</em>, sending them to an appropriate stream.</p>","abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"},{"name":"redis","doc":null,"default_value":"@sidekick","external_name":"redis","restriction":"MiniRedis"}],"args_string":"(events : Enumerable(T), redis : MiniRedis = @sidekick) : Enumerable(T) forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L119","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"Enumerable(T)"},{"name":"redis","doc":null,"default_value":"@sidekick","external_name":"redis","restriction":"MiniRedis"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Enumerable(T)","visibility":"Public","body":"{% unless ((T < Reference || T < Struct) && (!T.abstract?)) && (!T.union?)\n  raise(\"Can only emit non-abstract event objects (given `#{T}`)\")\nend %}\nstream = T.to_redis_key\nproc = ->(r : MiniRedis) do\n  events.each do |event|\n    r.send(\"XADD\", (@namespace + ':') + stream, \"MAXLEN\", \"~\", 1000, \"*\", \"pld\", event.to_msgpack)\n  end\nend\nif redis.transaction?\n  response = proc.call(redis)\nelse\n  response = redis.transaction(&proc)\nend\nevents\n"}},{"id":"emit(event:T):TforallT-instance-method","html_id":"emit(event:T):TforallT-instance-method","name":"emit","doc":"See `#emit(events)`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel/Redis.html#emit(event:T):TforallT-instance-method\">#emit(events)</a></code>.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(event : T) : T forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L171","def":{"name":"emit","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"(emit({event})).first"}},{"id":"emit(*events:*T):EnumerableforallT-instance-method","html_id":"emit(*events:*T):EnumerableforallT-instance-method","name":"emit","doc":"Emit *events*, sending them to an appropriate stream. See `Channel#emit`.\nThe underlying `XADD` command has `MAXLEN ~ 1000` option.\n\nThis method **blocks** until all subscribers to this event read it from the stream.\n\nTODO: Allow to change `MAXLEN`.","summary":"<p>Emit <em>events</em>, sending them to an appropriate stream.</p>","abstract":false,"args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"*T"}],"args_string":"(*events : <span class=\"o\">*</span><span class=\"t\">T</span>) : Enumerable forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L152","def":{"name":"emit","args":[{"name":"events","doc":null,"default_value":"","external_name":"events","restriction":"*T"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Enumerable","visibility":"Public","body":"@sidekick.transaction do |tx|\n  {% for t in T %}\n          ary = Array({{ t }}).new\n\n          events.each do |event|\n            if event.is_a?({{ t }})\n              ary << event\n            end\n          end\n\n          emit(ary, tx)\n        {% end %}\nend\nevents\n"}},{"id":"subscribe(event:T.class,consumer_id:String,&block:T->UNDERSCORE):SubscriptionforallT-instance-method","html_id":"subscribe(event:T.class,consumer_id:String,&amp;block:T-&gt;UNDERSCORE):SubscriptionforallT-instance-method","name":"subscribe","doc":"Begin consuming an *event* reading from its stream. It is guaranteed that\nonly a **single** consuming subscription with given *id* accross the whole\napplication would be notified about an event.\n\nBut such notifications are non-reliable, i.e. a single consumer\ncould crash during event handling, meaning that this event would not be handled\nproperly. If you need reliability, use a background job processing istead,\nfor example, [Worcr](https://worcr.com).\n\nSee `Channel#subscribe(event, consumer_id, &block)`.","summary":"<p>Begin consuming an <em>event</em> reading from its stream.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"},{"name":"consumer_id","doc":null,"default_value":"","external_name":"consumer_id","restriction":"String"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, consumer_id : String, &block : T -> UNDERSCORE) : Subscription forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L198","def":{"name":"subscribe","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"},{"name":"consumer_id","doc":null,"default_value":"","external_name":"consumer_id","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"Subscription","visibility":"Public","body":"wrap_changes do\n  subscribe_impl(T, consumer_id, &block)\nend"}},{"id":"subscribe(event:T.class,**filter,&block:T->UNDERSCORE):SubscriptionforallT-instance-method","html_id":"subscribe(event:T.class,**filter,&amp;block:T-&gt;UNDERSCORE):SubscriptionforallT-instance-method","name":"subscribe","doc":"Subscribe to an *event* reading from its stream.\nYou should yield the control to actually start reading.\nSee `Channel#subscribe(event, **filter, &block)`.","summary":"<p>Subscribe to an <em>event</em> reading from its stream.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"args_string":"(event : <span class=\"t\">T</span>.<span class=\"k\">class</span>, **filter, &block : T -> UNDERSCORE) : Subscription forall T","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L178","def":{"name":"subscribe","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T.class"}],"double_splat":{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"Subscription","visibility":"Public","body":"wrap_changes do\n  subscribe_impl(T, **filter, &block)\nend"}},{"id":"unsubscribe(subscription:Subscription):Bool-instance-method","html_id":"unsubscribe(subscription:Subscription):Bool-instance-method","name":"unsubscribe","doc":"See `Channel#unsubscribe`.","summary":"<p>See <code><a href=\"../../../Onyx/EDA/Channel.html#unsubscribe(subscription:Subscription):Bool-instance-method\">Channel#unsubscribe</a></code>.</p>","abstract":false,"args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Subscription"}],"args_string":"(subscription : Subscription) : Bool","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr#L209","def":{"name":"unsubscribe","args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Subscription"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"wrap_changes do\n  unsubscribe_impl(subscription)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Subscription","path":"Onyx/EDA/Channel/Subscription.html","kind":"class","full_name":"Onyx::EDA::Channel::Subscription(T)","name":"Subscription","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/subscription/inactive_error.cr","line_number":2,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription/inactive_error.cr"},{"filename":"onyx-eda/channel/subscription.cr","line_number":10,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel","kind":"class","full_name":"Onyx::EDA::Channel","name":"Channel"},"doc":"An event subscription instance. All subscribers are notified about an event unless\nit doesn't match the filters.\n\nYou should not initialize this class manually, use `Channel#subscribe` instead.\nWhen you want to stop subscription, call the `#unsubscribe` method on a\n`Subscription` instance or `Channel#unsubscribe`.","summary":"<p>An event subscription instance.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"active?-instance-method","html_id":"active?-instance-method","name":"active?","doc":"Whether is this subscription currently active.","summary":"<p>Whether is this subscription currently active.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription.cr#L14","def":{"name":"active?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@active"}},{"id":"unsubscribe-instance-method","html_id":"unsubscribe-instance-method","name":"unsubscribe","doc":"Cancel this subscription.\nMay raise `InactiveError` if the subscription is currently not active\n(i.e. already cancelled).","summary":"<p>Cancel this subscription.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription.cr#L19","def":{"name":"unsubscribe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @active\nelse\n  raise(InactiveError.new)\nend\n@active = false\n@eda_channel.unsubscribe(self)\n"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Subscription/InactiveError","path":"Onyx/EDA/Channel/Subscription/InactiveError.html","kind":"class","full_name":"Onyx::EDA::Channel::Subscription::InactiveError","name":"InactiveError","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/eda/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/channel/subscription/inactive_error.cr","line_number":5,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/subscription/inactive_error.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Channel/Subscription","kind":"class","full_name":"Onyx::EDA::Channel::Subscription(T)","name":"Subscription"},"doc":"Raised on `Subscription#unsubscribe` method call if the instance is not\ncurrently active (i.e. already cancelled).","summary":"<p>Raised on <code><a href=\"../../../../Onyx/EDA/Channel/Subscription.html#unsubscribe-instance-method\">Subscription#unsubscribe</a></code> method call if the instance is not currently active (i.e.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Consumer","path":"Onyx/EDA/Consumer.html","kind":"module","full_name":"Onyx::EDA::Consumer(T)","name":"Consumer","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Actor","kind":"module","full_name":"Onyx::EDA::Actor","name":"Actor"}],"locations":[{"filename":"onyx-eda/consumer.cr","line_number":7,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/consumer.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Actor","kind":"module","full_name":"Onyx::EDA::Actor","name":"Actor"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"A module which would make an including object an event consumer.\nConsumption differs from subscription in a way that only a single consumption\ninstance with certain ID would be notified about an event.\nIn this module, consumer ID equals to the including object class name.\n\nThis module behaves a lot like `Subscriber`, see its docs for details.","summary":"<p>A module which would make an including object an event consumer.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"handle(event:T)-instance-method","html_id":"handle(event:T)-instance-method","name":"handle","doc":"Handle incoming event. Must be defined explicitly in a consumer.\nTODO: Find a way to enable per-event custom ID.","summary":"<p>Handle incoming event.</p>","abstract":true,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(event : T)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/consumer.cr#L14","def":{"name":"handle","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Event","path":"Onyx/EDA/Event.html","kind":"module","full_name":"Onyx::EDA::Event","name":"Event","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-eda/event.cr","line_number":30,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/event.cr"},{"filename":"onyx-eda/channel/redis.cr","line_number":22,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/channel/redis.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"A basic event module to include.\n\nAccording to [Wikipedia](https://en.wikipedia.org/wiki/Event-driven_architecture#Event_flow_layers):\n\n> a significant temporal state or fact\n\nCode example:\n\n```\nstruct MyEvent\n  include Onyx::EDA::Event\n\n  getter foo\n\n  def initialize(@foo : String)\n  end\nend\n\nchannel.subscribe(MyEvent) do |event|\n  puts event.foo\nend\n\nevent = channel.emit(MyEvent.new)\npp event.event_id # => <UUID>\n\nsleep # You need to yield the control, see more in Channel docs\n```","summary":"<p>A basic event module to include.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"event_id:UUID-instance-method","html_id":"event_id:UUID-instance-method","name":"event_id","doc":"This event ID. Defaults to a random `UUID`.","summary":"<p>This event ID.</p>","abstract":false,"args":[],"args_string":" : UUID","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/event.cr#L36","def":{"name":"event_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UUID","visibility":"Public","body":"@event_id"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Subscriber","path":"Onyx/EDA/Subscriber.html","kind":"module","full_name":"Onyx::EDA::Subscriber(T)","name":"Subscriber","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Actor","kind":"module","full_name":"Onyx::EDA::Actor","name":"Actor"}],"locations":[{"filename":"onyx-eda/subscriber.cr","line_number":37,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/subscriber.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/eda/Onyx/EDA/Actor","kind":"module","full_name":"Onyx::EDA::Actor","name":"Actor"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/eda/Onyx/EDA","kind":"module","full_name":"Onyx::EDA","name":"EDA"},"doc":"A module which would make an including object an event subscriber.\nSubscribers are notified about every incoming event of type `T`.\n\nA single object can have multiple `Subscriber` and `Consumer` modules included,\njust make sure you have `#handle` method defined for each event.\n\nNOTE: You can not have **both** `Subscriber` and `Consumer` modules included for\na single event type.\n\nA single actor instance (this module includes `Actor` module) can be subscribed to\nmultiple channels simultaneously.\n\nTODO: Have an internal buffer to filter repeating (i.e. with the same ID) events\namong multiple channels.\n\n```\nclass Actor::Logger\n  include Onyx::EDA::Subscriber(Event::User::Registered)\n  include Onyx::EDA::Consumer(Event::Payment::Successfull)\n\n  # This method will be called in *all* Actor::Logger instances\n  def handle(event : Event::User::Registered)\n    log_into_terminal(\"New user with id #{event.id}\")\n  end\n\n  # This method will be called in only *one* Actor::Logger instance\n  def handle(event : Event::Payment::Successfull)\n    send_email(\"admin@example.com\", \"New payment of $#{event.amount}\")\n  end\nend\n\nactor = Actor::Logger.new\nactor.subscribe(channel) # Non-blocking method\n# ...\nactor.unsubscribe(channel)\n```","summary":"<p>A module which would make an including object an event subscriber.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"handle(event:T)-instance-method","html_id":"handle(event:T)-instance-method","name":"handle","doc":"Handle incoming event. Must be defined explicitly in a consumer.\nTODO: Find a way to enable per-event filtering.","summary":"<p>Handle incoming event.</p>","abstract":true,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(event : T)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/subscriber.cr#L44","def":{"name":"handle","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/eda/UUID","path":"UUID.html","kind":"struct","full_name":"UUID","name":"UUID","abstract":false,"superclass":{"html_id":"github.com/onyxframework/eda/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/onyxframework/eda/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/onyxframework/eda/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/onyxframework/eda/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-eda/ext/uuid/msgpack.cr","line_number":5,"url":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/ext/uuid/msgpack.cr"}],"repository_name":"github.com/onyxframework/eda","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Extensions to stdlib `UUID` struct.","summary":"<p>Extensions to stdlib <code><a href=\"UUID.html\">UUID</a></code> struct.</p>","class_methods":[],"constructors":[{"id":"new(pull:MessagePack::Unpacker)-class-method","html_id":"new(pull:MessagePack::Unpacker)-class-method","name":"new","doc":"Read from MessagePack input.","summary":"<p>Read from MessagePack input.</p>","abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"MessagePack::Unpacker"}],"args_string":"(pull : MessagePack::Unpacker)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/ext/uuid/msgpack.cr#L7","def":{"name":"new","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(Bytes.new(pull))"}}],"instance_methods":[{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":"Serialize into MessagePack bytes.","summary":"<p>Serialize into MessagePack bytes.</p>","abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/onyxframework/eda/blob/b2aefa71e99b9dad2626343d11066c3297a5b62a/src/onyx-eda/ext/uuid/msgpack.cr#L12","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bytes.to_slice.to_msgpack(packer)"}}],"macros":[],"types":[]}]}})